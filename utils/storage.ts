require("dotenv").config();

import admin from "firebase-admin";
import { v4 as uuidv4 } from "uuid";
import * as serviceAccount from "../config.json";
import * as fs from "fs";
import * as path from "path";

const BUCKET_URL = process.env.GCLOUD_STORAGE_BUCKET_URL as string;

// Just put that json into an object that works with ts :P
const adminParams = {
  type: serviceAccount.type,
  projectId: serviceAccount.project_id,
  privateKeyId: serviceAccount.private_key_id,
  privateKey: serviceAccount.private_key,
  clientEmail: serviceAccount.client_email,
  clientId: serviceAccount.client_id,
  authUri: serviceAccount.auth_uri,
  tokenUri: serviceAccount.token_uri,
  authProviderX509CertUrl: serviceAccount.auth_provider_x509_cert_url,
  clientC509CertUrl: serviceAccount.client_x509_cert_url,
};

admin.initializeApp({
  credential: admin.credential.cert(adminParams),
  storageBucket: BUCKET_URL,
});

const bucket = admin.storage().bucket();

/**
 * Uploads a given file to gcloud.
 * @param file A Express.Multer.File describing a file to be uploaded. Will use the buffer
 * @param uuid A boolean representing whether to use UUID or not
 * @returns The filename
 */
export async function uploadFile(file: Express.Multer.File) {
  return new Promise((resolve, reject) => {
    var blob = bucket.file(file.filename); // `filename` should be unique, generated by Multer
    var blobStream = blob.createWriteStream();

    blobStream.on("error", (err) => reject(err));
    blobStream.on("finish", resolve);
    blobStream.end(file.buffer);
  });
}

/**
 * Downloads a file from google cloud storage to a given destination.
 * @param sourceFilename String representing the file being downloaded remotely (such as "file.txt").
 * @param destFilename String representing the destination path of the download (such as "./file.txt").
 */
export async function downloadFile(
  sourceFilename: string,
  destFilename: string
) {
  const options = {
    destination: destFilename,
  };

  await bucket.file(sourceFilename).download(options);
}
